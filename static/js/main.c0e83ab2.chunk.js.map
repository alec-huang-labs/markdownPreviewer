{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","userInput","handleInput","bind","event","this","setState","target","value","class","id","href","onChange","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAGIA,G,MAASC,EAAQ,KAgFNC,E,kDAjCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,UAhDW,u1DAkDb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALH,E,wDAONC,GACVC,KAAKC,SAAS,CACZL,UAAWG,EAAMG,OAAOC,U,+BAI1B,OACA,yBAAKC,MAAQ,YACX,yBAAKC,GAAK,QACR,yBAAKA,GAAK,YACV,uBAAGA,GAAK,cAAR,UACA,uBAAGA,GAAK,cAAcC,KAAM,8CAA8CJ,OAAO,UAAS,gCAAQ,uBAAGE,MAAM,wBAG7G,yBAAKC,GAAK,QACR,8BAAUA,GAAK,SAASE,SAAYP,KAAKH,aAAcG,KAAKL,MAAMC,WAClE,yBAAKS,GAAK,UAAUG,wBAAyB,CAACC,OAAQlB,EAAOS,KAAKL,MAAMC,eAE1E,yBAAKS,GAAK,QACR,gCAAQ,uBAAGA,GAAK,cAAcC,KAAO,qCAAqCJ,OAAO,UAAS,uBAAGE,MAAM,yB,GA3BzFM,IAAMC,WCrCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c0e83ab2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Badge from \"react-bootstrap/Badge\";\nlet marked = require(\"marked\");\n\nconst placeholder = `# Welcome to my Markdown Previewer\n\nAs a new developer learning the *Markdown* syntax, it's frustrating to not know what your README.md file is going to look like until you commit your changes.  \nFret no more! Simply begin typing and this Markdown Preview Tool will parse through your markdown syntax to render the expected output in the preview window on the right. Feel free to delete or keep as much of the starter text as you want.\n\n## Here are some tips to get you started!\n\nWhen you end a sentence with two spaces and press enter, you begin a new line. \n\nHere are some bullets:\n- Markdown is a lightweight markup language invented by John Gruber and Aaron Swartz \n- The first release was March of 2004\n- Check out the [Wiki](https://en.wikipedia.org/wiki/Markdown) page here  \n\nThis is how you write block quotes:\n>\"Its key design goal is readability â€“ that the language be readable as-is, without looking like it has been marked up with tags or formatting instructions\" - Wiki\n\nAnd this is how you write \\`code\\`. The following is a code block:\n\n    let sayHello = function() {return \"hello world!\"}\n    console.log(sayHello());\n  \nAnd if you want to be more organized, you can make tables:\n\n| Syntax      | Description/Definition  | Output      |\n| :---        |    :----:    |        ---: |\n| Some Syntax | What it means| The Output  |\n| Paragraph   | Text        | And more     |\n\n\nAnd if you have too many things on your plate, try a To-Do list:\n\n- [x] Walk my dog teddy\n- [x] Code!\n- [ ] Go on a run\n- [ ] Make Dinner\n\nAlso if you don't like something, you can strike it out like so:  \nThe earth is ~Flat~ **Round**\n\nFor further documentation on Markdown, click on the Markdown Logo above the preview window. To see what I've been tinkering with, click the Octocat in the bottom right corner to visit my Github!  \n\n`\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      userInput: placeholder\n    }\n    this.handleInput = this.handleInput.bind(this);\n  }\n  handleInput(event){\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render () {\n    return (\n    <div class = \"backdrop\">\n      <div id = \"row1\">\n        <div id = \"logo-row\">\n        <p id = \"input-logo\">Editor</p>\n        <a id = \"output-logo\" href= \"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\"><button><i class=\"fab fa-markdown\"></i></button></a>\n        </div>\n      </div>\n      <div id = \"row2\">\n        <textarea id = \"editor\" onChange = {this.handleInput}>{this.state.userInput}</textarea>\n        <div id = \"preview\" dangerouslySetInnerHTML={{__html: marked(this.state.userInput),}}></div>\n      </div>\n      <div id = \"row3\">\n        <button><a id = \"github-logo\" href = \"https://github.com/alec-huang-labs\" target=\"_blank\"><i class=\"fa fa-github\"></i></a></button>\n      </div>\n    </div>\n    )}\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}